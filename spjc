package com.rest.example.client;

import java.io.StringWriter;  
import java.net.Authenticator;
import java.util.ArrayList;  
import java.util.logging.Level;  
import java.util.logging.Logger;  
  
import com.microsoft.schemas.sharepoint.soap.GetListItems;  
import com.microsoft.schemas.sharepoint.soap.GetListItemsResponse;  
import com.microsoft.schemas.sharepoint.soap.GetListResponse.GetListResult;  
import com.microsoft.schemas.sharepoint.soap.Lists;  
import com.microsoft.schemas.sharepoint.soap.ListsSoap;  
import com.sun.org.apache.xerces.internal.dom.events.*;  
  
import javax.xml.parsers.DocumentBuilder;  
import javax.xml.parsers.DocumentBuilderFactory;  
import javax.xml.transform.OutputKeys;  
import javax.xml.transform.Transformer;  
import javax.xml.transform.TransformerException;  
import javax.xml.transform.TransformerFactory;  
import javax.xml.transform.dom.DOMSource;  
import javax.xml.transform.stream.StreamResult;  
import javax.xml.ws.BindingProvider;  
import org.w3c.dom.Element;  
import org.w3c.dom.Document;  
import org.w3c.dom.NamedNodeMap;  
import org.w3c.dom.NodeList;  
import com.sun.org.apache.xerces.internal.*;  
  
public class SharePointJavaClient extends Authenticator {  
	
	
    public static void main(final String[] args) throws Exception { 
    	//String username="";
    	String username="";
    	String password="";
        final ListsSoap listsSoapProxy = sharePointListsAuth(username, password);  
        String listName = "listDocuments";  
        String rowLimit = "15";  
        ArrayList<String> listColumnNames = new ArrayList<String>();  
        listColumnNames.add("Title");  
        listColumnNames.add("column1");  
        SharePointJavaClient.displaySharePointList(listsSoapProxy, listName, listColumnNames, rowLimit);  
          
    }  
  
    public static ListsSoap sharePointListsAuth(String userName, String password) throws Exception {  
        ListsSoap port = null;  
        if (userName != null && password != null) {  
            try {  
                Lists service = new Lists();  
                port = service.getListsSoap();  
                System.out.println("Web Service Auth Username: " + userName);  
               // System.out.println("Web Service Auth pass: " + password);
               ((BindingProvider) port).getRequestContext().put(BindingProvider.USERNAME_PROPERTY, userName);  
               ((BindingProvider) port).getRequestContext().put(BindingProvider.PASSWORD_PROPERTY, password);  
            } catch (Exception e) {  
                throw new Exception("Error: " + e.toString());  
            }  
        } else {  
            throw new Exception("Couldn't authenticate: Invalid connection details given.");  
        }  
        return port;  
    }  
      
  
    public static void displaySharePointList(ListsSoap port, String listName, ArrayList<String> listColumnNames, String rowLimit) throws Exception {  
        if (port != null && listName != null && listColumnNames != null && rowLimit != null) {  
            try {  
  
                //Here are additional parameters that may be set  
                String viewName = "datasheet1";  
                GetListItems.ViewFields viewFields = null;  
               // GetListItems.Query query = null;  
                GetListItems.Query query = null;  
                GetListItems.QueryOptions queryOptions = null;  
                String webID = "";  
  
                //Calling the List Web Service  
                GetListItemsResponse.GetListItemsResult result = port.getListItems(listName, viewName, query, viewFields, rowLimit, queryOptions, webID);  
                Object listResult = result.getContent().get(0);  
                if ((listResult != null) && (listResult instanceof Element)) {  
                    Element node = (Element) listResult;  
  
                    //Dumps the retrieved info in the console  
                    Document document = node.getOwnerDocument();  
                    System.out.println("SharePoint Online Lists Web Service Response:" +   
                   SharePointJavaClient.xmlToString(document));  
                      System.out.println(document.toString());//............................
                    //selects a list of nodes which have z:row elements  
                    NodeList list = node.getElementsByTagName("z:row");  
                    System.out.println("=> " + list.getLength() + " results from SharePoint Online");  
  
                    //Displaying every result received from SharePoint, with its ID  
                    for (int i = 0; i < list.getLength(); i++) {  
  
                        //Gets the attributes of the current row/element  
                        NamedNodeMap attributes = list.item(i).getAttributes();  
                       System.out.println("******** Item ID: " + attributes.getNamedItem("ows_ID").getNodeValue()+" ********");  
  
                        //Displays all the attributes of the list item that correspond to the column names given  
                        for (String columnName : listColumnNames) {  
                            String internalColumnName = "ows_" + columnName;  
                            if (attributes.getNamedItem(internalColumnName) != null) {  
                               System.out.println(columnName + ": " + attributes.getNamedItem(internalColumnName).getNodeValue());  
                            } else {  
                                throw new Exception("Couldn't find the '" + columnName + "' column in the '" + listName + "' list in SharePoint.\n");  
                            }  
                        }  
                    }  
                } else {  
                    throw new Exception(listName + " list response from SharePoint is either null or corrupt\n");  
                }  
            } catch (Exception ex) {  
                throw new Exception("Exception. See stacktrace." + ex.toString() + "\n");  
            }  
        }  
    }  
  
      
    public static String xmlToString(Document docToString) {  
        String returnString = "\n-------------- XML START --------------\n";  
        try { // create string from xml tree //Output the XML //set up a transformer  
            TransformerFactory transfac = TransformerFactory.newInstance();  
            Transformer trans;  
            trans = transfac.newTransformer();  
            trans.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, "yes");  
            trans.setOutputProperty(OutputKeys.INDENT, "yes");  
            StringWriter sw = new StringWriter();  
            StreamResult streamResult = new StreamResult(sw);  
            DOMSource source = new DOMSource(docToString);  
            trans.transform(source, streamResult);  
            String xmlString = sw.toString();  
             returnString = returnString + xmlString;  
        } catch (TransformerException ex) {  
            Logger.getLogger(SharePointJavaClient.class.getName()).log(Level.SEVERE, null, ex);  
        }  
        returnString = returnString + "-------------- XML END --------------";  
        return returnString;  
    }  
   
    public static String getListItems(ListsSoap port, String listName) throws Exception {  
        String xmlToStrinResult = "";  
          
        if (port != null && listName != null ) {  
            try {  
                //Here are additional parameters that may be set  
                String viewName = "datasheet1";  
                GetListItems.ViewFields viewFields = null;  
                GetListItems.Query query = null;  
                GetListItems.QueryOptions queryOptions = null;  
                String webID = "2";  
                String rowLimit = "5";  
  
                //Calling the List Web Service  
                GetListItemsResponse.GetListItemsResult result = port.getListItems(listName, viewName, query, viewFields, rowLimit, queryOptions, webID);  
                Object listResult = result.getContent().get(0);  
                if ((listResult != null) && (listResult instanceof Element)) {  
                    Element node = (Element) listResult;  
  
                    //Dumps the retrieved info in the console  
                    Document document = node.getOwnerDocument();  
                    xmlToStrinResult = SharePointJavaClient.xmlToString(document);  
                  //  System.out.println("SharePoint Online Lists Web Service Response:" + xmlToStrinResult);  
                } else {  
                    xmlToStrinResult = listName + " list response from SharePoint is either null or corrupt";  
                }  
            } catch (Exception ex) {  
                xmlToStrinResult = "Exception occurred.\nPosible cause: invalid 'listName' parameter.\nStacktrace: " + ex.toString();  
            }  
        }  
        return xmlToStrinResult;  
    }  
  
  
  
         
}  
